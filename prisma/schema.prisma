generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Page {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  edit_groups String[]
  view_groups String[]
  path        String        @unique
  versions    PageVersion[]
}

model PageVersion {
  id             Int      @id @default(autoincrement())
  page_id        Int
  version        Int
  title          String
  content        String
  path           String
  edit_groups    String[]
  view_groups    String[]
  edited_by      String
  edited_at      DateTime @default(now())
  change_summary String?
  is_draft       Boolean  @default(false)
  page           Page     @relation(fields: [page_id], references: [id], onDelete: Cascade)

  @@unique([page_id, version])
  @@map("page_versions")
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  userGroups UserGroup[]
}

model User {
  id            String      @id @default(cuid())
  name          String?
  username      String      @unique
  email         String?     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // User's group memberships
  userGroups    UserGroup[]
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Wiki relations
  images        Image[]
}

model UserGroup {
  id        Int     @id @default(autoincrement())
  userId    String
  groupId   Int
  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id        Int      @id @default(autoincrement())
  filename  String
  mimetype  String
  data      Bytes
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
